TITLE ЛР_2
;------------------------------------------------------------------------------
;ЛР №1.2
;------------------------------------------------------------------------------
; Архітектура комп'ютера
; Завдання: ПРЯМИЙ ДОСТУП ДО ВІДЕОПАМЯТІ АРХІТЕКТУРІ ІА-32 (Х86) У REAL ADRESS MODE
; ВУЗ: КНУУ "КПІ"
; Факультет: ФІОТ
; Курс: 1
; Група: ІТ-з01
;------------------------------------------------------------------------------
; Автори: Клімов І.С., Бардах (Івко) М., Ропаєва Д.І., Трущак О. І.
; Дата: 25/03/21
;------------------------------------------------------------------------------
IDEAL   ; Директива - тип Асемблера tasm
MODEL small ; Директива - тип моделі пам'яті
STACK 256   ; Директива - розмір стеку в байтах
MACRO M_Init ; Початок макросу
mov ax,@data ; ax <- @data
mov ds,ax ; ds <- ax
mov es,ax ; es <- ax
ENDM M_Init ; Кінець макросу

DATASEG
exCode db 0
rect_line db '0', 21h, '1', 21h, '2', 21h, '3', 21h, '4', 21h
db '5', 21h, '6', 21h, '7', 21h, '8', 21h, '9', 21h
db '0', 21h, '1', 21h, '2', 21h, '3', 21h, '4', 21h
db '5', 21h, '6', 21h, '7', 21h, '8', 21h, '9', 21h ; рядок символів для виводу на екран, парні байти - символи, непарні - атрибути, у нашому випадку - колір фона символа синій, а колір самого символу зелений

CODESEG
Start:
M_Init
mov ax, 0B800h ; завантажуємо у 16-бітний регістр AX сегментну адресу текстової відеопам`яті
mov es, ax ; завантажуємо дані з регістру AX у регістр ES (завантаження даних напряму у сегментний регістр заборонена)
mov bx, 0 ; у регістр BX записуємо параметр 0 (регістр BX виступає у якості лічильника)
mov dx, 360 ; у регістр DX записуємо 360 (зміщення у сегменті)
mov di, dx ; у регістр DI записуємо дані з регістру DX (DI - регістр призначення у команді movsb), таким чином фізична адреса комірки, в яку потрібно записати певний байт - ES:DI

@loop:
mov cx, 40 ; записуємо параметр 40 у регістр CX для виводу рядка (детальніший опис наведений у описі до рис. 5)
mov si, offset rect_line ; пересилаємо адресу рядка rect_line у сегментний регістр SI
rep movsb ; записуємо у комірку з адресою ES:DI байт з комірки з адресою DS:SI, флаг DF рівний нулю, тому операція пересилає дані зліва направо, збільшуючи значення у регістрах SI та DI на значення, яке вказане у регістрі CX
add di, 120 ; зміщення для наступної лінії
inc bx ; збільшуємо значення у регістрі BX на 1
cmp bx, 10 ; порівнюємо значення в регістрі BX з 10
jne @loop ; якщо значенні не рівні, то значення флагу ZF дорівнює нулю і програма продовжить виконання від мітки @loop
Exit:
mov ah, 04Ch ; 4ch - функція виходу з програми для переривання 21h
mov al, [exCode] ; Вхідний параметр для функції 4ch - вихідний статус програми int 21h
int 21h
END Start
